# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sistema.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets  import QTableWidgetItem
from os.path import dirname, realpath, join
import sys
import pandas as pd
import numpy as np
import tkinter.ttk 
from tkinter import *
from tkinter.filedialog import askopenfile, askopenfilename
from statsmodels.tsa.ar_model import AutoReg, ar_select_order

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1365, 710)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.bt_arquivo = QtWidgets.QPushButton(self.centralwidget)
        self.bt_arquivo.setGeometry(QtCore.QRect(1120, 50, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.bt_arquivo.setFont(font)
        self.bt_arquivo.setObjectName("bt_arquivo")
        self.rb_media = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_media.setGeometry(QtCore.QRect(1120, 200, 68, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rb_media.setFont(font)
        self.rb_media.setChecked(True)
        self.rb_media.setObjectName("rb_media")
        self.rb_desvioPadrao = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_desvioPadrao.setGeometry(QtCore.QRect(1120, 240, 128, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rb_desvioPadrao.setFont(font)
        self.rb_desvioPadrao.setObjectName("rb_desvioPadrao")
        self.rb_mediaPonderada = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_mediaPonderada.setGeometry(QtCore.QRect(1120, 280, 148, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rb_mediaPonderada.setFont(font)
        self.rb_mediaPonderada.setObjectName("rb_mediaPonderada")
        self.rb_segregacaoDados = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_segregacaoDados.setGeometry(QtCore.QRect(1120, 320, 179, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rb_segregacaoDados.setFont(font)
        self.rb_segregacaoDados.setObjectName("rb_segregacaoDados")
        self.rb_regressaoLinear = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_regressaoLinear.setGeometry(QtCore.QRect(1120, 360, 147, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rb_regressaoLinear.setFont(font)
        self.rb_regressaoLinear.setObjectName("rb_regressaoLinear")
        self.rb_serieTemporais = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_serieTemporais.setGeometry(QtCore.QRect(1120, 400, 149, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.rb_serieTemporais.setFont(font)
        self.rb_serieTemporais.setObjectName("rb_serieTemporais")
        self.bt_predizer = QtWidgets.QPushButton(self.centralwidget)
        self.bt_predizer.setGeometry(QtCore.QRect(1120, 580, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.bt_predizer.setFont(font)
        self.bt_predizer.setObjectName("bt_predizer")
        self.txt_predicao = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_predicao.setGeometry(QtCore.QRect(80, 590, 1001, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_predicao.setFont(font)
        self.txt_predicao.setObjectName("txt_predicao")
        self.lb_predicaoFaturamento = QtWidgets.QLabel(self.centralwidget)
        self.lb_predicaoFaturamento.setGeometry(QtCore.QRect(440, -10, 561, 101))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(26)
        self.lb_predicaoFaturamento.setFont(font)
        self.lb_predicaoFaturamento.setObjectName("lb_predicaoFaturamento")
        self.txt_totalFaturado = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_totalFaturado.setGeometry(QtCore.QRect(932, 51, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txt_totalFaturado.setFont(font)
        self.txt_totalFaturado.setObjectName("txt_totalFaturado")
        self.lb_totalFaturado = QtWidgets.QLabel(self.centralwidget)
        self.lb_totalFaturado.setGeometry(QtCore.QRect(930, 30, 111, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lb_totalFaturado.setFont(font)
        self.lb_totalFaturado.setObjectName("lb_totalFaturado")
        self.sd_colunas = QtWidgets.QSpinBox(self.centralwidget)
        self.sd_colunas.setGeometry(QtCore.QRect(1170, 100, 41, 31))
        self.sd_colunas.setObjectName("sd_colunas")
        self.lb_tipoPredicao = QtWidgets.QLabel(self.centralwidget)
        self.lb_tipoPredicao.setGeometry(QtCore.QRect(1150, 170, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.lb_tipoPredicao.setFont(font)
        self.lb_tipoPredicao.setObjectName("lb_tipoPredicao")
        self.tb_faturamento = QtWidgets.QTableWidget(self.centralwidget)
        self.tb_faturamento.setGeometry(QtCore.QRect(80, 90, 1001, 491))
        self.tb_faturamento.setObjectName("tb_faturamento")
        self.tb_faturamento.setColumnCount(3)
        self.tb_faturamento.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tb_faturamento.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_faturamento.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_faturamento.setHorizontalHeaderItem(2, item)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1365, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.bt_arquivo.setText(_translate("MainWindow", "Arquivo"))
        self.rb_media.setText(_translate("MainWindow", "Média"))
        self.rb_desvioPadrao.setText(_translate("MainWindow", "Desvio Padrão"))
        self.rb_mediaPonderada.setText(_translate("MainWindow", "Média Ponderada"))
        self.rb_segregacaoDados.setText(_translate("MainWindow", "Segregação de Dados"))
        self.rb_regressaoLinear.setText(_translate("MainWindow", "Regressão Linear"))
        self.rb_serieTemporais.setText(_translate("MainWindow", "Séries Temporais"))
        self.bt_predizer.setText(_translate("MainWindow", "Predizer"))
        self.lb_predicaoFaturamento.setText(_translate("MainWindow", "Predição de Faturamento"))
        self.lb_totalFaturado.setText(_translate("MainWindow", "Total faturado"))
        self.lb_tipoPredicao.setText(_translate("MainWindow", "Tipo de Predição"))
        item = self.tb_faturamento.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Ano"))
        item = self.tb_faturamento.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "New Column"))
        item = self.tb_faturamento.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Faturamento"))

        self.bt_arquivo.clicked.connect(self.openFile)
        self.bt_predizer.clicked.connect(self.predicao)

    def openFile(self):
        # Localiza caminho do arquivo
        Tk().withdraw()
        path = askopenfilename()
        self.all_data = pd.read_csv(path)
    # Carregar o arquivo na tabela de faturamento
        numColumn = self.sd_colunas.value()
        if numColumn == 0:
            numRows = len(self.all_data.index)
        else:
            numRows = numColumn
        self.tb_faturamento.setColumnCount(len(self.all_data.columns))
        self.tb_faturamento.setRowCount(numRows)
        self.tb_faturamento.setHorizontalHeaderLabels(self.all_data.columns)
        
        for i in range(numRows):
            for j in range(len(self.all_data.columns)):
                self.tb_faturamento.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))


        self.tb_faturamento.resizeColumnsToContents()
        self.tb_faturamento.resizeRowsToContents

        # Soma do faturamento
        soma_faturamento = str('R$%0.02f' %sum(self.all_data['Faturamento']))
        self.txt_totalFaturado.setText(soma_faturamento)

    def predicao(self):
        df = self.all_data
        ### Média ###
        if self.rb_media.isChecked() == True:
            media = df['Faturamento'].mean()
            predicao = 'Nos próximos meses será faturado R$ ' + str('%0.02f' %media) + ' /mes em media.'
            self.txt_predicao.setText(predicao)
        ### Desvio Padrão ###
        elif self.rb_desvioPadrao.isChecked() == True:
            media = df['Faturamento'].mean()
            devpad = df['Faturamento'].std()
            coelacao_var = (devpad / media) * 100
            predicao =  'Predição de R$ ' + str('%0.02f' %media) + ' /mes podendo variar em torno de ' + str('%0.02f' %coelacao_var) + '%.'
            self.txt_predicao.setText(predicao)
        ### Média Ponderada ###
        elif self.rb_mediaPonderada.isChecked() == True:
            lista = np.transpose((np.array([df['Faturamento'].tail(), np.arange(1,6)])))
            pesos = np.arange(1,6)
            df_ult = pd.DataFrame(lista, columns = ['Ultimos', 'Pesos'])
            df_ult['Ponderado'] = df_ult['Ultimos'] * df_ult['Pesos']
            med_pond = df_ult['Ponderado'].sum() / df_ult['Pesos'].sum()
            predicao =  'Predição ponderada de R$ ' + str('%0.02f' %med_pond) + ' para os próximos meses.'
            self.txt_predicao.setText(predicao)
        ### Segregação dos Dados ###
        elif self.rb_segregacaoDados.isChecked() == True:
            df_janeiro = df.loc[df['Mes'] == 1]
            media_segre= df_janeiro['Faturamento'].mean()
            predicao =  'Predição segregada de R$ ' + str('%0.02f' %media_segre) + ' para o mes de janeiro.'
            self.txt_predicao.setText(predicao)
        ### Regressão Linear ###
        elif self.rb_regressaoLinear.isChecked() == True:
            coefficients = np.polyfit(df.index, df['Faturamento'], 1)
            a = coefficients[0]
            b = coefficients[1]
            jan_reta = a * 36 + b
            predicao =  'Predição regressão de R$ ' + str('%0.02f' %jan_reta) + ' para o mes de janeiro.'
            self.txt_predicao.setText(predicao)
        ### Série Temporais ###
        elif self.rb_serieTemporais.isChecked() == True:
            # Fit model/treinamento do modelo
            model = AutoReg(df['Faturamento'], lags=1, old_names=True) #old_names só foi utilizado por conta de um aviso da próxima versão
            model_fit = model.fit()
            # Predição
            yhat = model_fit.predict(len(df['Faturamento']), len(df['Faturamento'])+2)
            pred = np.array(yhat)
            predicao =  'Predição por série temporal de R$ ' + str('%0.02f' %pred[0]) + ' para o mes de janeiro, ' + str('%0.02f' %pred[1]) + ' para o mes de fevereiro.'
            self.txt_predicao.setText(predicao)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
